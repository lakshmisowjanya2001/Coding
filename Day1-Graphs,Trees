*NO.OF ISLANDS*

class Solution(object):
    def numIslands(self, grid):
        r = len(grid)
        c = len(grid[0])
        answer = 0
        def dfs(x, y, r, c):
            if grid[x][y] == "1":
                grid[x][y] = "0"
                if x + 1 <= r - 1 and grid[x + 1][y] == "1":
                    dfs(x + 1, y, r, c)
                if y + 1 <= c - 1 and grid[x][y + 1] == "1":
                    dfs(x, y + 1, r, c)
                if x - 1 >= 0 and grid[x - 1][y] == "1":
                    dfs(x - 1, y, r, c)
                if y - 1 >= 0 and grid[x][y - 1] == "1":
                    dfs(x, y - 1, r, c)
        for i in range(0, r):
            for j in range(0, c):
                if grid[i][j] == "1":
                    answer += 1
                    dfs(i, j, r, c)
        return answer
        
*FLOOD FILL*
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        r = len(image)
        c = len(image[0])
        
        visited = [False]*r
        for i in range(r):
            visited[i] = [False]*c
        
        def fill(i,j,source_value):
            if i<0 or i>=r or j<0 or j>=c:
                return
            
            curr_value = image[i][j]
            
            if curr_value == source_value and visited[i][j] == False:
                visited[i][j] = True
                fill(i+1,j,curr_value)
                fill(i-1,j,curr_value)
                fill(i,j+1,curr_value)
                fill(i,j-1,curr_value)
                image[i][j] = newColor
        
        fill(sr,sc,image[sr][sc])
        return image
        
 *ROTTING ORANGES*
 class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        fresh = set()
        rotton = set()
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 2:
                    rotton.add((i,j))
                elif grid[i][j] == 1:
                    fresh.add((i, j)) 
        mins = 0
        dirs = [(1,0), (-1,0), (0,1), (0,-1)]
        while len(fresh) > 0:
            infected = set()
            for r in rotton:
                row = r[0]
                col = r[1]
                for dir in dirs:
                    new_row = dir[0] + row
                    new_col = dir[1] + col
                    if (new_row, new_col) in fresh:
                        fresh.remove((new_row, new_col))
                        infected.add((new_row, new_col))   
            if len(infected) == 0:
                return -1
            rotton = infected
            mins += 1
        return mins
